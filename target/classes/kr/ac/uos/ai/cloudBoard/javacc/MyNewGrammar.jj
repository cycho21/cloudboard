/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(DynamicComp)
package kr.ac.uos.ai.cloudBoard.javacc;
import kr.ac.uos.ai.cloudBoard.astNode.*;
import java.util.*;

public class DynamicComp
{
  public void init()
  {
  }

  public void makeParseAndCondition(String requestString)
  {
    try
    {
    //	  CodeBlock c = DynamicComp.codeBlock();
    //      Condition condition = new Condition();
    //      System.out.println(c);
    //      StatementCode code = c.getStatements().get(0);
    //      System.out.println(((Assignment) code).getLeft());
    //      System.out.println(((Assignment) code).getRight());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    catch (Error e)
    {
      e.printStackTrace();
    }
  }

  public LinkedList getStatements() throws ParseException
  {
    return this.codeBlock().getStatements();
  }

  public CodeBlock getCodeBlock() throws ParseException
  {
    return this.codeBlock();
  }
}

PARSER_END(DynamicComp)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* type */
{
  < INT : "int" >
| < BOOLEAN : "boolean" >
}

TOKEN : /* constructor */
{
  < BREAK : "break" >
| < CONTINUE : "continue" >
| < ELSE : "else" >
| < IF : "if" >
| < RETURN : "return" >
| < WHILE : "while" >
| < TRUE : "true" >
| < FALSE : "false" >
}

TOKEN :
{
  < INTEGER_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    )*
    "\"" 
    >
| < IDENTIFIER : < LETTER > (< PART_LETTER >)* >
| < #LETTER : 
    [ // all chars for which Character.isIdentifierStart is true
    "A"-"Z", 
    "_", 
    "a"-"z" 
    ] 
    >
| 
  < #PART_LETTER : 
    [ // all chars for which Character.isIdentifierPart is true
    "0"-"9", 
    "A"-"Z", 
    "_", 
    "a"-"z" 
    ] 
    >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < AT : "@" >
}

/* OPERATORS */
TOKEN :
{
  < OPERATORS : ["<", ">"] >
|  < END : "#" >
| < ASSIGN : "=" >
| < BANG : "!" >
| < HOOK : "?" >
| < COLON : ":" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NE : "!=" >
| < SC_OR : "||" >
| < SC_AND : "&&" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < REM : "%" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
}

CodeBlock codeBlock() :
{
  CodeBlock block = new CodeBlock();
  LinkedList < StatementCode > list = null;
}
{
  list = statements()
  {
    block.setStatements(list);
    return block;
  }
}

LinkedList < StatementCode > statements() :
{
  LinkedList < StatementCode > list = new LinkedList < StatementCode > ();
  StatementCode code = null;
}
{
  (
    code = statement()
    {
      list.add(code);
    }
  )+
  {
    return list;
  }
}

StatementCode statement() :
{
  StatementCode code = null;
}
{
  code = whileStatement()
  {
  	code.setOper("while");
    return code;
  }
| code = ifStatement()
  {
  	code.setOper("if");
    return code;
  }
| code = assignmentStatement()
  {
  code.setOper("assign");
    return code;
  }
}

IfStatement ifStatement() :
{
  IfStatement ifStatement = new IfStatement();
  ExpressionCode ifExpression;
}
{
	ifExpression = ifStatementCondition()
  {
  	ifStatement.setExp(ifExpression);
    return ifStatement;
  }
}

WhileStatement whileStatement() :
{
  WhileStatement whileStatement = new WhileStatement();
  ExpressionCode whileExpression;
}
{
   whileExpression = whileStatementCondition()
  {
  	whileStatement.setExp(whileExpression);
    return whileStatement;
  }
}

ExpressionCode ifStatementCondition() :
{
  ExpressionCode exp = new ExpressionCode();
  Token robotName;
  Token sensorName;
  Token t;
  Token operator;
}
{
  	< IF > < LPAREN > robotName = < IDENTIFIER > < DOT > sensorName = < IDENTIFIER > operator = <OPERATORS> t = <INTEGER_LITERAL> < RPAREN > <LBRACE ><RBRACE >
  {
  	exp.setRobotName(robotName.image);
  	exp.setSensorName(sensorName.image);
  	exp.setRhs(t.image);
  	exp.setOperator(operator.image);
    return exp;
  }
}

ExpressionCode whileStatementCondition() :
{
  ExpressionCode exp = new ExpressionCode();
  Token robotName;
  Token sensorName;
  Token t;
  Token operator;
}

{
  < WHILE > < LPAREN > robotName = < IDENTIFIER > < DOT > sensorName = < IDENTIFIER > operator = <OPERATORS> t = <INTEGER_LITERAL> < RPAREN ><LBRACE ><RBRACE >
  {
  	exp.setRobotName(robotName.image);
  	exp.setSensorName(sensorName.image);
  	exp.setRhs(t.image);
  	exp.setOperator(operator.image);
    return exp;
  }
}

Condition ifStatementBlock() :
{
  Condition condition = new Condition();
  String tempString;
}
{
  < LBRACE > tempString = returnStatement() < RBRACE >
  {
  	condition.setWhatReturn(tempString);
    return condition;
  }
}

Condition whileStatementBlock() :
{
  Condition condition = new Condition();
  String tempString;
}
{
  < LBRACE > tempString = returnStatement() < RBRACE >
  {
  	condition.setWhatReturn(tempString);
    return condition;
  }
}

String returnStatement() :
{
  Token whenReturn;
}
{
  < RETURN > whenReturn = < IDENTIFIER > < SEMICOLON >
  {
    return whenReturn.toString();
  }
}

Assignment assignmentStatement() :
{
  Assignment assign = new Assignment();
  ExpressionCode exp;
  Token robotName;
  Token sensorName;
}
{
  robotName = < IDENTIFIER > < DOT > sensorName = < IDENTIFIER > < ASSIGN > exp = expression()
  {
	assign.setRobotName(robotName.image);
	assign.setSensorName(sensorName.image);
	assign.setRight(exp);
	return assign;
}
}

ExpressionCode expression() :
{
  ExpressionCode exp = new ExpressionCode();
  Token t = null;
}

{
  t = < IDENTIFIER >
  {
    exp.setValue(t.image);
    return exp;
  }
  | t = < INTEGER_LITERAL>
  {
    exp.setValue(t.image);
    return exp;
  }
}