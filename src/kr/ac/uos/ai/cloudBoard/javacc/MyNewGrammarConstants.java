/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package kr.ac.uos.ai.cloudBoard.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INT = 5;
  /** RegularExpression Id. */
  int BOOLEAN = 6;
  /** RegularExpression Id. */
  int BREAK = 7;
  /** RegularExpression Id. */
  int CONTINUE = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int TRUE = 12;
  /** RegularExpression Id. */
  int FALSE = 13;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 14;
  /** RegularExpression Id. */
  int STRING_LITERAL = 15;
  /** RegularExpression Id. */
  int IDENTIFIER = 16;
  /** RegularExpression Id. */
  int LETTER = 17;
  /** RegularExpression Id. */
  int PART_LETTER = 18;
  /** RegularExpression Id. */
  int LPAREN = 19;
  /** RegularExpression Id. */
  int RPAREN = 20;
  /** RegularExpression Id. */
  int LBRACE = 21;
  /** RegularExpression Id. */
  int RBRACE = 22;
  /** RegularExpression Id. */
  int LBRACKET = 23;
  /** RegularExpression Id. */
  int RBRACKET = 24;
  /** RegularExpression Id. */
  int SEMICOLON = 25;
  /** RegularExpression Id. */
  int COMMA = 26;
  /** RegularExpression Id. */
  int DOT = 27;
  /** RegularExpression Id. */
  int AT = 28;
  /** RegularExpression Id. */
  int END = 29;
  /** RegularExpression Id. */
  int ASSIGN = 30;
  /** RegularExpression Id. */
  int LT = 31;
  /** RegularExpression Id. */
  int BANG = 32;
  /** RegularExpression Id. */
  int HOOK = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int EQ = 35;
  /** RegularExpression Id. */
  int LE = 36;
  /** RegularExpression Id. */
  int GE = 37;
  /** RegularExpression Id. */
  int NE = 38;
  /** RegularExpression Id. */
  int SC_OR = 39;
  /** RegularExpression Id. */
  int SC_AND = 40;
  /** RegularExpression Id. */
  int INCR = 41;
  /** RegularExpression Id. */
  int DECR = 42;
  /** RegularExpression Id. */
  int PLUS = 43;
  /** RegularExpression Id. */
  int MINUS = 44;
  /** RegularExpression Id. */
  int STAR = 45;
  /** RegularExpression Id. */
  int SLASH = 46;
  /** RegularExpression Id. */
  int REM = 47;
  /** RegularExpression Id. */
  int PLUSASSIGN = 48;
  /** RegularExpression Id. */
  int MINUSASSIGN = 49;
  /** RegularExpression Id. */
  int STARASSIGN = 50;
  /** RegularExpression Id. */
  int SLASHASSIGN = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"int\"",
    "\"boolean\"",
    "\"break\"",
    "\"continue\"",
    "\"else\"",
    "\"if\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "<INTEGER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"$\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
  };

}
