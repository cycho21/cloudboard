/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(MyNewGrammar)package kr.ac.uos.ai.cloudBoard.javacc;

import kr.ac.uos.ai.cloudBoard.astNode.*;
import java.util.*;

public class MyNewGrammar{  public static void main(String args []) throws ParseException  {
    System.out.println("input : ");    MyNewGrammar parser = new MyNewGrammar(System.in);      try      {
        CodeBlock c =  MyNewGrammar.codeBlock();
		System.out.println(c);
        StatementCode code = c.getStatements().get(0);
        System.out.println(((Assignment)code).getLeft());
        System.out.println(((Assignment)code).getRight());
        }      catch (Exception e)      {
        e.printStackTrace();
            }      catch (Error e)      {
        e.printStackTrace();      }  }}PARSER_END(MyNewGrammar)SKIP :{  " "| "\r"| "\t"| "\n"}
TOKEN : /* type */
{
  < INT : "int" >
| < BOOLEAN : "boolean" >
}

TOKEN : /* constructor */
{

  < BREAK: "break" >
| < CONTINUE: "continue" >
| < ELSE: "else" >
| < IF: "if" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
}
TOKEN :{     < INTEGER_LITERAL:["1"-"9"] (["0"-"9"])* >
|    < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < IDENTIFIER: <LETTER> (<PART_LETTER>)* >

| < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}
/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < END : "$" >
| < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
}


CodeBlock codeBlock():
{
  CodeBlock block = new CodeBlock();
  LinkedList< StatementCode > list = null;}
{  	list = statements() < END >
  	 {
  	   block.setStatements(list);
  	  return block;  	 }
  	 
}

LinkedList<StatementCode > statements():
{
  LinkedList<StatementCode > list = new LinkedList<StatementCode >();
  StatementCode code = null;}
{
  (
  	  code = statement() < SEMICOLON >  	  {
  	    list.add(code);  	  }
  	)+
{
  return list;}
  	}

StatementCode statement():
{
  StatementCode code = null;}
{
	whileStatement()
| 	ifStatement()
|	code = assignmentStatement()
	{
	  return code;	}}

void ifStatement():
{}{ <IF ><IDENTIFIER >}

void whileStatement():
{}
{
  whileStatementCondition() whileStatementBlock()
   }

void whileStatementCondition():
{}
{
  < WHILE > < LPAREN > expression() < RPAREN >}




void whileStatementBlock():
{}
{
  < LBRACE > statements() < RBRACE >
| statement()}

Assignment assignmentStatement():
{
  Assignment assign = new Assignment();
  Token t;
  ExpressionCode exp;}
{
  t = < IDENTIFIER > < ASSIGN > exp = expression()
  {
    assign.setLeft(t.image);
    assign.setRight(exp);
    return assign;  }
}


ExpressionCode expression():{
  ExpressionCode exp = new ExpressionCode();
  Token t = null;}
{
  	t = < INTEGER_LITERAL >
  {
    exp.setValue(t.image);
    return exp;  } }